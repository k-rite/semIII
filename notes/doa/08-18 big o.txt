x=n             O(n)
while (x>0) {
    x=x-1       O(1)
}
O(n) O(1)
Linear 
-------------------
int FindMaxelement(int[] Array)
{
    int max=int.MinValue;
    for (int i=1;i<array.length;i++) {              O(n)
        if(array[i]>max){
            max=array[i];                           O(1)
        }
        }
return max;
}
if statement true -> O(n)
without if statement -> O(1)
------------------ 
int finalversion(int[] Array)
for(int i=0;i<array.Length-1;i++)                         {depends upon length}
{
    for (int j=1;j<array.Length;j++)                      {depends upon array}
    {
        if (array[i]>array[j])
        {
            inversions++;
        }
    }
    return inversions;
}

True: O(n^2)
------------------
longsum(int n)
for(int a=1;a<n;a++)
{
    for (int b=1;b<n;b++)
{
    for (int c=1;c<n;c++)
{
    sum+=a*b*c;
}
}
return sum;
}

O(n^3)
---------------- 
