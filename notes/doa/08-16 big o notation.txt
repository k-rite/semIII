------------------------------------------
Big O notation 
------------------------------------------
linear    | O(n)   | Input size is changed {/ graph}
Constant  | O(1)   | Input size is same doesn't affect execution time {_ graph}
Quadratic | O(n^2) | Execution is double of n

{Remove Constant -> Take out co eff}
Fastest Growing term | Highest order of {N}   


O(1)   will execute in the same time(or space) regardless of the input size of data. {Asymptomatic Analysis of the Algorithm}
O(n)   performance will grow linerly and directly proportional to the input size.
O(n^2) performance will grow directly proportional to the square of the input size.
____________________________________________________________________________________________________________________________________-
a1=[1,4,6,8,9,3,2,7,5,10]
    def calsum(a1):
        sum=0                         O(1)
        for i in a1:                  
            sum=sum+i                 O(n)
        return sum
    print(calsum(a1))
O(n)
-----------------------
a1=[1,4,6,8,9,3,2,7,5,10]
def calsum(a1):                 
    sum=0                       O(1)
    return sum                  O(1)

O(1)+O(1)-> Constant O(1)
-----------------------

a2=[[3,5,7],[1,2,4],[6,3,5]]
def calsum(a2):
    sum=0                                     O(1)
    for row in a2:
        for i in a2:
            sum=sum+i                         O(1)
    return sum,

O(1) O(n) O(n) O(1) -> Quadratic O(n^2)

-------------------------