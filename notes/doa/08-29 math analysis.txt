====================================
Mathematical Ananlysis
====================================
Theoretical (Priori Analysis) | Summation,Recurrence Relation
Empirical (Posterior Analysis) | random input then measure acurate time taken

General Rule
n {Order of Magnitude} | Basic Operation | Best Case/Worse Case for n | C(n)  count | Solving Summation

T(n) = C(n)
Upper bound -l+1 = 
n^2 = n(n+1)/2 ----------------------------------------------{IMPORTANT}
Find max element in a list:
                            max = 0                       c(1)
                            for i in list:                c(n)
                                if max > i:
                                    max = i
                                else:
                                    pass        
                            return max

n |for loop, if else statement | no case |  C(1) C(n) | C(n) 


list,newlist = [3,5,6,6,7],[]
for i in list:
    if i not in newlist:newlist.append(i)
    else:print(f'{i} is a duplicate')

    Mathematical Annotations:
    Matrix Multiplication
    n^3 | Multiplication of MATRIX | Worst Case | c(n) c(n) c(n) | C(n^3)
    ----------------------------------------------------------------
    Nonnegative Integer
                            S<-0 
                            for i <-1 to n do:          C(n)
                                S=S+i*i 
                            return S
    n | Addition and Multiplication | Worst Case | C(1) C(n) | C(n)
    ----------------------------------------------------------------
    Enigma
                            for i in range(0,n-2):
                                for j in range(i+1,n-1):
                                    if A[i,j] != A[j,i]:
                                        return false
                            return true
    n^2 | If statement | Best case if doesn't trigger, Worst Case if statement is triggered | C(n) C(n) | C(n^2)